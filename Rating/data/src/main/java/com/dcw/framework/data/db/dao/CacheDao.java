package com.dcw.framework.data.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.dcw.framework.data.db.bean.Cache;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table cache.
 */
public class CacheDao extends AbstractDao<Cache, String> {

    public static final String TABLENAME = "cache";

    public CacheDao(DaoConfig config) {
        super(config);
    }

    ;


    public CacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'cache' (" + //
                "'GROUP_ID' INTEGER," + // 0: groupId
                "'KEY' TEXT PRIMARY KEY NOT NULL ," + // 1: key
                "'VALUE' TEXT," + // 2: value
                "'EXPIRE_TIME' INTEGER);"); // 3: expireTime
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'cache'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cache entity) {
        stmt.clearBindings();

        Integer groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(1, groupId);
        }

        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }

        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }

        Long expireTime = entity.getExpireTime();
        if (expireTime != null) {
            stmt.bindLong(4, expireTime);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Cache readEntity(Cursor cursor, int offset) {
        Cache entity = new Cache( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // groupId
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // value
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // expireTime
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Cache entity, int offset) {
        entity.setGroupId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExpireTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(Cache entity, long rowId) {
        return entity.getKey();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(Cache entity) {
        if (entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Cache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GroupId = new Property(0, Integer.class, "groupId", false, "GROUP_ID");
        public final static Property Key = new Property(1, String.class, "key", true, "KEY");
        public final static Property Value = new Property(2, String.class, "value", false, "VALUE");
        public final static Property ExpireTime = new Property(3, Long.class, "expireTime", false, "EXPIRE_TIME");
    }

}
